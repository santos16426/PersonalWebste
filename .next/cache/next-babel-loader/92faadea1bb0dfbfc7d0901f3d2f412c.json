{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport { Form, Icon, message } from \"antd\";\nimport { FormWrapper, InputGroupWrapper } from \"./styles\";\nimport TextInput from \"../input_fields/TextInput\";\nimport TextArea from \"../input_fields/TextArea\";\nimport { SkewedButton } from \"../button/\";\nimport HoverText from \"../HoverText\";\nimport emailjs from \"emailjs-com\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nvar Item = Form.Item;\nvar captcha;\n\nvar ContactForm = function ContactForm(_ref) {\n  var form = _ref.form;\n\n  var _useState = useState(false),\n      isFormSubmitting = _useState[0],\n      setFormToSubmitting = _useState[1];\n\n  var _useState2 = useState(false),\n      messageSent = _useState2[0],\n      setMessageSent = _useState2[1];\n\n  var getFieldDecorator = form.getFieldDecorator;\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    setFormToSubmitting(true);\n    form.validateFields(function _callee(err, values) {\n      var template_params, user_id, service_id, template_id, data;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (err) {\n                _context.next = 12;\n                break;\n              }\n\n              template_params = {\n                name: values.name,\n                email: values.email,\n                subject: values.subject,\n                message: values.message\n              };\n              user_id = \"user_XnTI7jD0oxjOlZMZCMsid\";\n              service_id = \"billy_joe_santos\";\n              template_id = \"contact_form\";\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(emailjs.send(service_id, template_id, template_params, user_id));\n\n            case 7:\n              data = _context.sent;\n\n              if (data.status === 200) {\n                form.resetFields();\n                captcha.reset();\n                message.success(\"Sent\");\n              } else {\n                captcha.reset();\n                message.warning(\"Sorry! Try again later\");\n              }\n\n              setFormToSubmitting(false);\n              _context.next = 13;\n              break;\n\n            case 12:\n              setFormToSubmitting(false);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  };\n\n  var renderButtonMessage = function renderButtonMessage() {\n    if (isFormSubmitting) {\n      return \"Sending...\";\n    }\n\n    if (messageSent) {\n      return \"Message Sent!\";\n    }\n\n    return \"Submit\";\n  };\n\n  var renderIcon = function renderIcon() {\n    if (isFormSubmitting) {\n      return __jsx(Icon, {\n        type: \"loading\",\n        style: {\n          color: \"#ffffff\"\n        }\n      });\n    }\n\n    if (messageSent) {\n      return __jsx(Icon, {\n        type: \"check-circle\",\n        style: {\n          color: \"#ffffff\"\n        }\n      });\n    }\n\n    return __jsx(\"img\", {\n      src: \"/images/paper-plane.svg\",\n      alt: \"paper-plane\"\n    });\n  };\n\n  return __jsx(FormWrapper, null, __jsx(HoverText, {\n    className: \"h2\",\n    string: \"Contact Me\"\n  }), __jsx(\"p\", null, \"I am interested in freelance opportunities - especially ambitious or large projects. However, if you have other request or question, don't hesitate to contact me using below form either.\"), __jsx(Form, {\n    className: \"form-group\",\n    onSubmit: handleSubmit\n  }, __jsx(InputGroupWrapper, null, __jsx(Item, {\n    className: \"custom-field\"\n  }, getFieldDecorator(\"name\", {\n    rules: [{\n      required: true,\n      message: \"Name is required\"\n    }]\n  })(__jsx(TextInput, {\n    placeholder: \"Name\"\n  }))), __jsx(Item, {\n    className: \"custom-field\"\n  }, getFieldDecorator(\"email\", {\n    rules: [{\n      required: true,\n      message: \"Email is required\"\n    }]\n  })(__jsx(TextInput, {\n    placeholder: \"Email\"\n  })))), __jsx(Item, {\n    className: \"custom-field\"\n  }, getFieldDecorator(\"subject\", {// rules: [{ required: true, message: \"Email is required\" }]\n  })(__jsx(TextInput, {\n    placeholder: \"Subject\"\n  }))), __jsx(Item, {\n    className: \"custom-field\"\n  }, getFieldDecorator(\"message\", {\n    rules: [{\n      required: true,\n      message: \"Message is required\"\n    }]\n  })(__jsx(TextArea, {\n    placeholder: \"Message\"\n  }))), __jsx(InputGroupWrapper, null, __jsx(Item, {\n    className: \"custom-field with-right-offset\"\n  }, getFieldDecorator(\"recaptchaToken\", {\n    rules: [{\n      required: true,\n      message: \"Please verify that you are not a robot.\"\n    }]\n  })(__jsx(ReCAPTCHA, {\n    className: \"custom-recaptcha\",\n    sitekey: \"6LeH4N4UAAAAAEDy6ulyBxoQRo3amnBB6kk58fNN\",\n    ref: function ref(e) {\n      return captcha = e;\n    }\n  }))), __jsx(SkewedButton, {\n    htmlType: \"submit\",\n    disabled: isFormSubmitting || messageSent,\n    className: messageSent ? \"success\" : \"\"\n  }, __jsx(\"span\", {\n    className: \"submit-icon\"\n  }, renderIcon()), __jsx(\"span\", {\n    className: \"submit-message\"\n  }, renderButtonMessage())))));\n};\n\nexport default Form.create()(ContactForm);","map":null,"metadata":{},"sourceType":"module"}